/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.cascadingVersion = '2.2.+'

// uncomment if testing a local build of Cascading via
// > cd $CASCADING_HOME; gradle clean install
//cascadingVersion = "${cascadingVersion}-wip-dev"

allprojects {

  apply plugin: 'java'
  apply plugin: 'idea'

  repositories {
    mavenLocal()
    mavenCentral()
    mavenRepo name: 'conjars', url: 'http://conjars.org/repo/'
  }

  // core dependencies - see {platform}-settings.gradle for platform specific dependencies
  dependencies {
    runtime( group: 'cascading', name: 'cascading-core', version: cascadingVersion, classifier: 'tests' )
    runtime( group: 'cascading', name: 'cascading-platform', version: cascadingVersion, classifier: 'tests' )

    testCompile group: 'junit', name: 'junit', version: '4.8.+'
  }
}

subprojects {

  task unarchiveTest {
    outputs.dir "$buildDir/classes/test/"
  }

  unarchiveTest << {

    mkdir "$buildDir/classes/test/"

    // we only want the jars with test classifier
    def jars = configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies.findAll { dep ->
      dep.name.contains( 'cascading' )
    }.collect { dep ->
      dep.moduleArtifacts.collect { it.file }
    }.flatten().findAll { file ->
      file.toString().endsWith( '-tests.jar' )
    }

    jars.each { jarFile ->

      println "dep-> ${jarFile}"

      def jar = zipTree( jarFile )

      inputs.file jar

      copy {
        from jar
        into "$buildDir/classes/test/"
      }
    }
  }

  test {
    dependsOn << unarchiveTest

    forkEvery = 1
    jvmArgs '-Xmx756m'

    ignoreFailures = true

    include '**/*PlatformTest.class'

    systemProperties[ 'test.cluster.enabled' ] = 'true'
    systemProperties[ 'test.data.path' ] = new String( "${buildDir}/classes/test/data/" )
    systemProperties[ 'test.output.root' ] = new String( "${buildDir}/test/output/" )
  }
}

test.enabled = false; // disable root project tests