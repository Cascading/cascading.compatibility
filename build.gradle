/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.cascadingVersion = '2.0.2'

allprojects {

  apply plugin: 'java'
  apply plugin: 'idea'

  repositories {
    mavenLocal()
    mavenCentral()
    mavenRepo name: 'conjars', url: 'http://conjars.org/repo/'
    mavenRepo name: 'apache', url: 'https://repository.apache.org/content/repositories/releases/'
  }

  // core dependencies - see {platform}-settings.gradle for platform specific dependencies
  dependencies {
    runtime( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
    runtime( group: 'cascading', name: 'cascading-xml', version: cascadingVersion )
    runtime( group: 'cascading', name: 'cascading-test', version: cascadingVersion ) { transitive = false }
    runtime( group: 'junit', name: 'junit', version: '4.8.+' )

    // currently necessary for TrapPlatformTest, ConfigDefPlatformTest
    runtime( group: 'cascading', name: 'cascading-local', version: cascadingVersion )
  }
}

subprojects {

  task unarchiveTest {
    outputs.dir "$buildDir/classes/test/"
  }

  unarchiveTest << {

    def jar = zipTree( configurations.runtime.files {dep -> dep.name == 'cascading-test'}.toList()[ 0 ] )

    inputs.file jar

    mkdir "$buildDir/classes/test/"

    copy {
      from jar
      into "$buildDir/classes/test/"
    }
  }

  test {
    dependsOn << unarchiveTest

    forkEvery = 1
    jvmArgs '-Xmx756m'

    ignoreFailures = true

    include '**/*PlatformTest.class'

    systemProperties[ 'test.cluster.enabled' ] = 'true'
    systemProperties[ 'test.data.path' ] = new String( "${buildDir}/classes/test/data/" )
    systemProperties[ 'test.output.root' ] = new String( "${buildDir}/test/output/" )
  }
}

test.enabled = false; // disable root project tests