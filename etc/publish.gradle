/*
 * Copyright (c) 2007-2016 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven{ url 'http://conjars.org/repo/' }
  }
  dependencies {
    classpath "com.amazonaws:aws-java-sdk-s3:1.9.40"
  }
}

import java.nio.file.Paths
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.AccessControlList;
import com.amazonaws.services.s3.model.GroupGrantee;
import com.amazonaws.services.s3.model.Permission;
import com.amazonaws.services.s3.model.PutObjectRequest

ext.s3bucketName = "compatibility.cascading.org"

task gatherTestResultTarballs() {
  description = "collects all test result tarballs and and makes their names unique"
  doLast {
    for( subproject in subprojects )
    {
      def tree = fileTree( subproject.buildDir ) {
        include '*.tgz'
      }
      for( tarball in tree )
      {
        copy {
          from tarball
          into "${subproject.buildDir}/compat/${subproject.cascadingPlatform}"
          rename '(.+)', actualCascadingRelease + "-" + subproject.cascadingPlatform + '-$1'
        }
      }
    }
  }
}

task uploadResults( dependsOn: [ gatherTestResultTarballs ] ) {
  description = "publishes compatibility test results"

  doLast {
    def prefix = "incoming/${project.actualCascadingRelease}"
    for ( sub in subprojects ) {
      println sub
      def tree = fileTree( "${sub.buildDir}/compat" )
      def acl = new AccessControlList()
      acl.grantPermission( GroupGrantee.AuthenticatedUsers, Permission.Read )
      acl.grantPermission( GroupGrantee.AuthenticatedUsers, Permission.Write )

      def s3 = new AmazonS3Client()
      for( resultFile in tree ) {
        def path = resultFile.path.toString().replaceAll( sub.buildDir.toString(), "" )
        path =  path.replaceAll( "compat/", "" )
        def key = "${prefix}${path}"
        logger.info( "uploading ${path} to s3://${s3bucketName}/${key}" )
        def s3PutReq = new PutObjectRequest( s3bucketName, key, resultFile ).withAccessControlList( acl )
        s3.putObject( s3PutReq )
      }
    }
  }
}
